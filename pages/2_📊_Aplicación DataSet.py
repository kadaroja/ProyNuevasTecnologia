import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

st.set_page_config(layout="wide")

st.subheader("üßë‚ÄçüéìMatriculas a Educaci√≥n Superior en Colombia")

# Usamos `on_bad_lines='skip'` en lugar de `error_bad_lines=False`
df = pd.read_csv(
    'static/datasets/ESTADISTICAS_DE_MATRICULA_POR_DEPARTAMENTOS.csv', 
    encoding='latin-1', 
    on_bad_lines='skip',
    sep=';'
)


tad_descripcion, tab_An√°lisis_Exploratorio, tab_Filtro_Final_Din√°mico = st.tabs(["Descripci√≥n", "An√°lisis Exploratorio", "Filtro Final Din√°mico"])

#----------------------------------------------------------
#Generador de datos
#----------------------------------------------------------
with tad_descripcion:      

    st.markdown('''

    ### El proyecto
    El proyecto consiste en el desarrollo de una herramienta de gesti√≥n de asistencia de empleados mediante la generaci√≥n y an√°lisis de datos. Utiliza tecnolog√≠a de visualizaci√≥n 
        interactiva en Streamlit para representar patrones de asistencia y facilita la toma de decisiones informadas.        
    ### Objetivo principal
    El objetivo principal es optimizar la supervisi√≥n y an√°lisis de asistencia de empleados, proporcionando visualizaciones de datos que permitan identificar patrones, 
    reducir ausentismo y mejorar la eficiencia en la gesti√≥n de personal.
    ### Su importancia
    Este proyecto es importante porque permite a las organizaciones contar con una herramienta visual e interactiva para gestionar la asistencia, lo que facilita la detecci√≥n temprana
    de problemas y la implementaci√≥n de medidas correctivas, mejorando la productividad y el ambiente laboral.
    ### Desarrollo

    -   Explicaci√≥n detallada del proyecto
    -   Procedimiento utilizado
    -   Resultados obtenidos

    ### Conclusi√≥n

    -   Resumen de los resultados
    -   Logros alcanzados
    -   Dificultades encontradas
    -   Aportes personales
    ''')    

#----------------------------------------------------------
#Anal√≠tica 1
#----------------------------------------------------------
with tab_An√°lisis_Exploratorio:    

        # Muestra las primeras 5 filas del DataFrame
    st.subheader("Primeras 5 filas")
    st.write(df.head())
    
    # Muestra la cantidad de filas y columnas
    st.subheader("Cantidad de filas y columnas")
    st.write(df.shape)
    
    # Muestra los tipos de datos de cada columna
    st.subheader("Tipos de datos de cada columna")
    st.write(df.dtypes)
    
    # Muestra las columnas con valores nulos
    st.subheader("Columnas con valores nulos")
    st.write(df.isnull().sum())
    
    # Resumen de conteo por a√±o
    if 'Ano' in df.columns:
        st.subheader("Conteo de registros por A√±o")
        conteo_por_ano = df['Ano'].value_counts().sort_index()  # Cuenta los registros por a√±o
        st.write(conteo_por_ano)  
    
#----------------------------------------------------------

#Anal√≠tica 2
#----------------------------------------------------------
with st.container():
    st.title("Filtro Final Din√°mico")
    st.markdown("""
    * Muestra un resumen din√°mico del DataFrame filtrado. 
    * Incluye informaci√≥n como los criterios de filtrado aplicados, la tabla de datos filtrados, gr√°ficos y estad√≠sticas relevantes.
    * Se actualiza autom√°ticamente cada vez que se realiza un filtro en las pesta√±as anteriores. 
    """)
    
    # Filtros interactivos
    st.sidebar.header("Filtros de Datos")
    
    # Filtro por a√±os (selecci√≥n m√∫ltiple)
    a√±os_filtrados = st.sidebar.multiselect("Selecciona los A√±os", df['Ano'].unique(), default=df['Ano'].unique())
    
    # Filtro por departamentos (selecci√≥n m√∫ltiple)
    departamentos_filtrados = st.sidebar.multiselect("Selecciona los Departamentos", df['Nombre del Departamento'].unique(), default=df['Nombre del Departamento'].unique())
    
    # Filtro por nivel acad√©mico (por ejemplo, 'TECNICA PROFESIONAL')
    nivel_filtrado = st.sidebar.selectbox("Selecciona el Nivel Acad√©mico", df.columns[3:8])  # Asumiendo que los niveles acad√©micos est√°n en las columnas 3-7

    # Filtrado del DataFrame
    df_filtrado = df[(df['Ano'].isin(a√±os_filtrados)) & (df['Nombre del Departamento'].isin(departamentos_filtrados))]

    # Mostrar criterios de filtro y DataFrame filtrado
    st.subheader("Criterios de Filtrado Aplicados")
    st.write("A√±os seleccionados:", a√±os_filtrados)
    st.write("Departamentos seleccionados:", departamentos_filtrados)
    st.write("Nivel acad√©mico seleccionado:", nivel_filtrado)
    st.write("Datos Filtrados")
    st.write(df_filtrado)

    # Estad√≠sticas descriptivas
    st.subheader("Estad√≠sticas Descriptivas del DataFrame Filtrado")
    st.write(df_filtrado.describe())

    # Gr√°ficos Din√°micos con Plotly
    st.subheader(f"Distribuci√≥n del Nivel Acad√©mico: {nivel_filtrado}")
    
    # Histograma de los niveles educativos filtrados por a√±o
    if st.checkbox("Mostrar histograma de distribuci√≥n de nivel acad√©mico", value=True):
        fig = px.histogram(df_filtrado, 
                           x='Ano', 
                           y=nivel_filtrado, 
                           histfunc="sum",  # Utiliza la suma para visualizar el total por a√±o
                           color='Ano',  # Colorear por a√±o para hacerlo m√°s visual
                           labels={nivel_filtrado: 'N√∫mero de Matr√≠culas'},  # Etiqueta del eje Y
                           title=f"Distribuci√≥n de {nivel_filtrado} por A√±o",
                           nbins=15,  # Cantidad de barras en el histograma
                           template="plotly",  # Estilo visual
                           color_discrete_sequence=px.colors.qualitative.Pastel1)  # Usar "Pastel1" en lugar de "pastel"
        st.plotly_chart(fig)
    
    # Gr√°fico de Histogramas por Departamento y Nivel Acad√©mico
    st.subheader(f"Histograma de {nivel_filtrado} por Departamento")
    if st.checkbox("Mostrar histograma por departamento", value=True):
        fig = px.histogram(df_filtrado, 
                           x='Nombre del Departamento', 
                           y=nivel_filtrado, 
                           histfunc="sum", 
                           color='Nombre del Departamento',  # Colorear por departamento
                           labels={nivel_filtrado: 'N√∫mero de Matr√≠culas'},  # Etiqueta eje Y
                           title=f"Distribuci√≥n de {nivel_filtrado} por Departamento",
                           nbins=20,  # N√∫mero de barras en el histograma
                           template="plotly",  # Estilo visual
                           color_discrete_sequence=px.colors.qualitative.Pastel1)  # Usar "Pastel1" en lugar de "pastel"
        st.plotly_chart(fig)
